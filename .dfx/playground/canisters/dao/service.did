type Account = record { owner : principal; subaccount : opt Subaccount };
type CreateProposalErr = variant { NotDAOMember; NotEnoughTokens };
type CreateProposalOk = nat;
type DAO = service {
  addGoal : (text) -> ();
  addMember : (Member) -> (Result);
  balanceOf : (Account) -> (nat) query;
  createProposal : (text) -> (createProposalResult);
  getAllMembers : () -> (vec Member) query;
  getGoals : () -> (vec text) query;
  getManifesto : () -> (text) query;
  getMember : (principal) -> (Result_1) query;
  getName : () -> (text) query;
  getProposal : (nat) -> (opt Proposal) query;
  getStats : () -> (DAOInfo) query;
  http_request : (HttpRequest) -> (HttpResponse);
  mint : (principal, nat) -> ();
  numberOfMembers : () -> (nat) query;
  removeMember : () -> (Result);
  setManifesto : (text) -> ();
  tokenName : () -> (text) query;
  tokenSymbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (Account, Account, nat) -> (Result);
  updateMember : (Member) -> (Result);
  vote : (nat, bool) -> (voteResult);
  whoami : () -> (principal);
};
type DAOInfo = record {
  member : vec text;
  numberOfMembers : nat;
  logo : text;
  name : text;
  manifesto : text;
  goals : vec text;
};
type HeaderField = record { text; text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec HeaderField;
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec HeaderField;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type Member = record { age : nat; name : text };
type Proposal = record {
  id : nat;
  status : Status;
  votes : int;
  voters : vec principal;
  manifest : text;
};
type Result = variant { ok; err : text };
type Result_1 = variant { ok : Member; err : text };
type Status = variant { Open; Rejected; Accepted };
type StreamingCallback = func (StreamingCallbackToken) -> (
    StreamingCallbackResponse,
  ) query;
type StreamingCallbackResponse = record {
  token : opt StreamingCallbackToken;
  body : vec nat8;
};
type StreamingCallbackToken = record {
  key : text;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : StreamingCallback;
  };
};
type Subaccount = vec nat8;
type VoteErr = variant { AlreadyVoted; ProposalEnded; ProposalNotFound };
type VoteOk = variant { ProposalOpen; ProposalRefused; ProposalAccepted };
type createProposalResult = variant {
  ok : CreateProposalOk;
  err : CreateProposalErr;
};
type voteResult = variant { ok : VoteOk; err : VoteErr };
service : DAO